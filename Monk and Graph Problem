N, M = list(map(int,input().split()))
G = {}
A = [[0]*M]*N
for i in range(N):
    G[i+1] = set()

lines = 1
while(lines<=M):
    y = list(map(int,input().split()))
    G[y[0]] = G[y[0]] | {y[1]}
    G[y[1]] = G[y[1]] | {y[0]}
#    A[y[0]-1][y[1]-1] = 1
#    A[y[1]-1][y[0]-1] = 1
    lines += 1

def bfs(graph, start):
    visited, queue = set(), [start]
    while queue:
        vertex = queue.pop(0)
        if vertex not in visited:
            visited.add(vertex)
            queue.extend(graph[vertex] - visited)
    return visited

nodes = set(range(1,N+1))
marked = {}
for n in nodes:
    marked[n] = False
max = 0
for i in nodes:
    count = 0
    visited = bfs(G,i)
    nodes = nodes - visited
    for v in visited:
        if marked[v]==False:
            marked[v] = True
        else:
            continue
        for u in G[v]:
            if marked[u]==False:
                count += 1
            else:
                continue
    if count>max:
        max = count

print(max)
