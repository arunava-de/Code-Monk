import sys

sys.setrecursionlimit(1500)
class Tree:	
    def __init__(self,v=None,l=None,r=None):
        self.value = v
        self.left = l
        self.right = r

    def isempty(self):
        if self.value == None:
            return(True)
        else:
            return(False)
	
    def isleaf(self):
        if self.value == None:
            return False
        if self.left or self.right:
            return False
        return True
    
    def __str__(self):
        if self.isempty():
            return("E")
        return("( "+str(self.value)+" "+self.left.__str__()+" "+self.right.__str__()+" )")

class BSTree(Tree):

    def insert(self,v):
        if self.isempty():
            self.value = v
            return
        if self.value == v:
            return
        if self.value > v:
            if self.left:
                self.left.insert(v)
            else:
                self.left = BSTree(v)
        if self.value < v:
            if self.right:
                self.right.insert(v)
            else:
                self.right = BSTree(v)
        return
    
    def search(self,v,path):
        if self.isempty():
            return False
        elif v==self.value:
            path.append(self.value)
            return path
        elif v < self.value:
            path.append(self.value)
            return(self.left.search(v,path))
        else:
            path.append(self.value)
            return(self.right.search(v,path))

N = int(input())
A = list(map(int,input().split()))
X, Y = list(map(int,input().split()))

BT = BSTree()
for i in range(0,N):
    BT.insert(A[i])
    
path_X = BT.search(X,[])
path_Y = BT.search(Y,[])

i = 0
while i<min(len(path_X),len(path_Y)):
    if path_X[i]==path_Y[i]:
        i+=1
    else:
        i-=1
        break

res = max(path_X[i:]+path_Y[i:])
print(res)
