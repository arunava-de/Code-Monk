def initialize(D, N):
    size = list(range(N))
    for i in range(N):
        D[i] = i
        size[i] = 1
    return size, D

def root(D, i):
    while D[i] != i:
        D[i] = D[D[i]]
        i = D[i]
    return i

def union(D, size, A, B):
    root_A = root(D, A)
    root_B = root(D, B)
    if root_A == root_B:
        pass
    else:
        D[root_B] = root_A
        size[root_A] += size[root_B]
        size[root_B] = 1

N = int(input())
D = [0]*N
m = 10**9 + 7
size, D = initialize(D, N)

Q = int(input())

for q in range(Q):
    A, B = map(int, input().split())
    A -= 1
    B -= 1
    union(D, size, A, B)
#if (B - A + 1)%2 == 0:
    temp = (B-A)//2
    for i in range(1, temp+1):
        union(D, size, A+i, B-i)
#    else:
#        temp = (B-A)//2
#        for i in range(1, temp):
#            union(D, size, A+i, B-i)

roots = set()

for i in range(N):
    r = root(D, i)
    roots = roots | {r}

print(10**len(roots)%m)
