def initialize(D, N):
    size = list(range(N))
    for i in range(N):
        D[i] = i
        size[i] = 1
    return size, D

def root(D, i):
    while D[i] != i:
        i = D[i]
    return i

def union(D, size, A, B):
    root_A = root(D, A)
    root_B = root(D, B)
    # if size[root_A] < size[root_B]:
    #     D[root_A] = D[root_B]
    #     size[root_B] += size[root_A]
    # else:
    #     D[root_B] = D[root_A]
    #     size[root_A] += size[root_B]
    if root_A == root_B:
        pass
    else:
        D[root_B] = root_A
        size[root_A] += size[root_B]
        size[root_B] = 1

m = 10**9 + 7
N, M = list(map(int,input().split()))

D = [0]*N
size, D = initialize(D, N)

for i in range(M):
    A, B = list(map(int,input().split()))
    union(D, size, A-1, B-1)
    
res = 1
for i in range(N):
    res = (res*size[i])%m
    
print(res%m)
