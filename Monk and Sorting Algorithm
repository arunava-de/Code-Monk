N = int(input())
A = list(input().split())
A_rev = []
m = max(list(map(int,A)))
M = len(str(m))
for a in A:
    A_rev.append(a[::-1])
# print(A_rev)
# print(M)
wt = [0]*N
#ind = list(range(N))



def partition(ind,arr,low,high): 
    i = ( low-1 )         # index of smaller element 
    pivot = arr[high]     # pivot 
  
    for j in range(low , high): 
  
        # If current element is smaller than or 
        # equal to pivot 
        if   arr[j] <= pivot: 
          
            # increment index of smaller element 
            i = i+1 
            arr[i],arr[j] = arr[j],arr[i] 
            ind[i],ind[j] = ind[j],ind[i]
  
    arr[i+1],arr[high] = arr[high],arr[i+1] 
    ind[i+1],ind[high] = ind[high],ind[i+1]
    return ( i+1 ) 
  
# The main function that implements QuickSort 
# arr[] --> Array to be sorted, 
# low  --> Starting index, 
# high  --> Ending index 
  
# Function to do Quick sort 
def quickSort(ind,arr,low,high): 
    if low < high: 
  
        # pi is partitioning index, arr[p] is now 
        # at right place 
        pi = partition(ind, arr,low,high) 
  
        # Separately sort elements before 
        # partition and after partition 
        quickSort(ind, arr, low, pi-1) 
        quickSort(ind, arr, pi+1, high) 



i = 1
while(1+5*(i-1)<=M):
    for j in range(N):
        k = A_rev[j]
        n = len(A_rev[j])
        if(5*(i-1)<n):
            if(5*i-1<n):
                ch = k[5*(i-1):5*i]
                wt[j] = int(ch[::-1])
            else:
                ch = k[5*(i-1):5*i] + '0'*(5*i-M)
                wt[j] = int(ch[::-1])
        else:
            wt[j] = 0         
    i = i+1
    ind = list(range(N))
    quickSort(ind,wt,0,N-1)
    for d in range(N):
        print(A[ind[d]],end=" ")
    print()
# print(mergeSort(wt))
