def root(D, i):
    while D[i] != i:
        D[i] = D[D[i]]
        i = D[i]
    return i

def union(D, size, A, B):
    root_A = root(D, A)
    root_B = root(D, B)
    if root_A == root_B:
        pass
    else:
        D[root_B] = root_A
        size[root_A] += size[root_B]
        size[root_B] = 1

X, Y = map(int, input().split())
#D = [i for i in range(2*max(X,Y)+2)]
D = ['no'] * (2*max(X,Y)+1)
size = ['no']*(2*max(X,Y)+1)

for i in range(1,X+1):
    D[2*i-1] = 2*i-1
    size[2*i-1] = 1

for i in range(1,Y+1):
    D[2*i-2] = 2*i-2
    size[2*i-2] = 1
    
q1 = int(input())

for i in range(q1):
    A, B = map(int,input().split())
    union(D, size, 2*A-1, 2*B-1)

q2 = int(input())

for i in range(q2):
    A, B = map(int,input().split())
    union(D, size, 2*A-2, 2*B-2)

q3 = int(input())

for i in range(q3):
    A, B = map(int,input().split())
    union(D, size, 2*A-1, 2*B-2)

roots = set()
for i in range(len(D)):
    if D[i] == 'no':
        continue
    r = root(D, i)
    roots = roots | {r}
    
men = {}
women = {}

for r in roots:
    men[r] = 0
    women[r] = 0

for i in range(len(D)):
    if D[i] == 'no':
        continue
    r = root(D, i)
    if i%2 == 0:
        women[r] += 1
    else:
        men[r] += 1

res = 0
for i in roots:
    sum = 0
    for j in roots-{i}:
        sum += women[j]
    res += men[i]*sum
    
print(res)
