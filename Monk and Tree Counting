N, K = list(map(int,input().split()))
A = list(map(int,input().split()))
parents = list(map(int,input().split()))

children = {}
for k in set(parents):
    children[k] = []

for i in range(N-1):
    k = parents[i]
    children[k].append(i+2)

def findPairs(arr, n, x): 
    l = 0; r = n-1
    result = 0
    while (l < r): 
        if (arr[l] + arr[r] < x): 
          
            result += (r - l) 
            l += 1
        else: 
            r -= 1
  
    return result 

def descendants(n,bt):
    desc = []
    def funct(n):
        nonlocal desc
        if n not in bt.keys():
            return 0
        if len(bt[n])==1:
            desc.append(bt[n][0])
            funct(bt[n][0])
            return 0
        else:
            desc = desc + bt[n]
            funct(bt[n][0])
            funct(bt[n][1])
            return 0
        return 0
    funct(n)
    return desc

descndts = {}
for k in parents:
    descndts[k] = descendants(k,children)

count = 0
for k in descndts.keys():
    target = K - A[k-1]
    arr = [A[i-1] for i in descndts[k]]
    arr.sort()
    n = len(arr)
    count += n*(n-1)//2 - findPairs(arr, n, target)
    
print(count)
    
